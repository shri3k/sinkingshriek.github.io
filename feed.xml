<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thisisyojan</title>
    <description>In a way, we&#39;re all spiders weaving the web.</description>
    <link>http://sinkingshriek.github.io/</link>
    <atom:link href="http://sinkingshriek.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>quick overview of partial application</title>
        <description>&lt;p&gt;One of the thing that I like most about JavaScript is that it can also be written in a functional way and partial application is one of them. &lt;/p&gt;

&lt;h2 id=&quot;what-is-partial-application&quot;&gt;What is Partial Application?&lt;/h2&gt;

&lt;p&gt;If you look at the name itself then it should give a &lt;em&gt;partial&lt;/em&gt; hint on what a partial application is. Partial Application is a way of partially filling a function with arguments early on and be able to use that information in the later part of your application. It is mostly possible because of closure.&lt;br /&gt;
To have a partial function we first need a wrapper function which takes, either left or right argument as a function to apply the partial application to. The arguments provided early on are held for the entirety of application due to the help of closure while a complete new function is returned with the bounded function (also passed in as a parameter) being invoked with the partial(arguments passed early on) and later arguments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that there are different variation of partial applications. Left, right and full application. But we’ll just talk about left partial application here as that’s the most commonly used and easy to understand.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage:&lt;/h2&gt;

&lt;p&gt;Partial Application is pretty powerful if you know how to use it. I mostly use it when I have a repeated task which produces different output based on the provided input (parameters). And because functions are first class citizens in JavaScript, it becomes even more powerful as you can inject your custom function to the already predefined one. &lt;/p&gt;

&lt;p&gt;Let’s see this in code:-&lt;/p&gt;

&lt;p&gt;Let’s say we want to have a function that adds 1 to all the arrays on the given argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var addArray = function(arr){
	arr.forEach(function(i){
		console.log(++i);
	})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you realize that after some times you want to do more with arrays, let’s say mulitply them by 2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var multiplyArray = function(arr){
	arr.forEach(function(i){
		console.log(i*2);
	})
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now instead of making a seperate function and iterating over the array over and over, you can create a generic partial function to iterate over the array and then just perform your task by giving the callback to the partial function. Let’s see that in action.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//First we create a partial function generator
var partial = function(fn){
	var self = this,
		arg = Array.prototype.slice.call(arguments, 1);
	return function(){
		var allArgs = args.concat(Array.prototype.slice.call(arguments));
		fn.apply(self, allArgs);
	};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you fairly know about JavaScript then it’s not that hard to get your head around what’s happening on the above code. Probably just a pattern that you haven’t thought about before. But let’s see what’s happening anyway.&lt;/p&gt;

&lt;p&gt;We start with regular &lt;code&gt;function expression&lt;/code&gt; with one parameter, this is the parameter that accepts function to be bounded or partialized (not the official terminology).&lt;br /&gt;
Inside the function we hold all the arguments other than the &lt;code&gt;fn&lt;/code&gt; or the first one (&lt;em&gt;by hold I mean it will be remembered even after the function returns because we’re returning a function&lt;/em&gt;). These are the arguments that you want to be prefilled for further usage in your application.  &lt;br /&gt;
On the return statment we’re accepting more parameters to be filled on the latter part of our application and we finally invoke the &lt;em&gt;partialized&lt;/em&gt; function with all the parameters (with prefilled and latter filled)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Now we make our repetitive function into a partial function
//But we have to modify our function a little
var loopArray = function(arr){
	arr.forEach(Array.prototype.slice.call(arguments, 1)[0]);
};

//Now let&#39;s make a partial function
var partialized = partial(loopArray, [1,2,3,4]);
//We can now use partialized function to accept any callbacks
//on the prefilled iteration

//Our initial adder function
var addArray = function(arr){
	console.log(++arg);
}

//Using the partial function
partialized(addArray);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s slow down and explain what I’m doing. The &lt;code&gt;loopArray&lt;/code&gt; function is made in such a way that the second parameter is treated as a callback for our &lt;code&gt;forEach&lt;/code&gt;. You could also do :-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loopArray = function(arr, callback){
	arr.forEach(callback);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it’s totally upto you. The &lt;code&gt;arguments&lt;/code&gt; way can be a little vague but is more dynamic, meaning you have to do little to change in your code to change the behavior of your function while the explicit declaration of parameter is more rigid but more clear.&lt;br /&gt;
Anyway, the point here is we’re in agreement that the second argument will be a callback. On &lt;code&gt;partialized function&lt;/code&gt; expression we specify the array that we want to be prefilled. This parameter is going to be used with all the function that uses this partial application.&lt;br /&gt;
Now, we just create callbacks and pass it to the partial application as we’re doing with &lt;code&gt;partialized(addArray)&lt;/code&gt; &lt;code&gt;addArray&lt;/code&gt; here is our callback function.&lt;/p&gt;

&lt;p&gt;Although this is not the greatest example of partial application, I just wanted to show a bit practical example other than just adding 1 to a number like you see in other posts.&lt;/p&gt;

&lt;p&gt;You can do the same for multiply too. You can play more on the jsbin below.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/dihobi/1/embed?js,console&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You can read more about right, full partial and other cool stuff on the links below:-&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benalman.com/news/2012/09/partial-application-in-javascript/&quot;&gt;http://benalman.com/news/2012/09/partial-application-in-javascript/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://ejohn.org/blog/partial-functions-in-javascript/&quot;&gt;http://ejohn.org/blog/partial-functions-in-javascript/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 20:34:19 -0600</pubDate>
        <link>http://sinkingshriek.github.io/partial-application/javascript/2014/11/25/quick-overview-of-partial-application/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/partial-application/javascript/2014/11/25/quick-overview-of-partial-application/</guid>
      </item>
    
      <item>
        <title>event loop and related</title>
        <description>&lt;p&gt;So, recently I watched the talk from &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;Philip Roberts&lt;/a&gt;. If you have time then I highly recommed that you watch that talk instead of reading this because I am just going to summarize from that talk. You can think of this as TL;DW version of that talk.&lt;/p&gt;

&lt;p&gt;Okay, let’s just dive in and see how JavaScript actually works and how this event loop and others play part (I’m going to assume that you already know that JS is single threaded and concurrent language). &lt;/p&gt;

&lt;p&gt;Probably the most crucial part for me that clicked to understand how JavaScript really works the way it does was that Web Browsers or NodeJS consists of many components. Those components are V8, SpiderMonkey, Chakra, Crackan or any other JavaScript engine, APIs (this is your DOM, ajax, filesystem and other APIs that Web Browsers or NodeJS provide you, you can find more &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API&quot;&gt;Web API here&lt;/a&gt; and &lt;a href=&quot;http://nodejs.org/api/&quot;&gt;Node API here&lt;/a&gt;), a callback queue and finally an event loop. There might be more but these are pretty much the basics. &lt;/p&gt;

&lt;p&gt;For simplicity’s sake I’ll just talk about browsers but it applies to server-side part of JavaScript too.&lt;br /&gt;
Okay, so browsers consists of :-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JS Engine&lt;/li&gt;
  &lt;li&gt;Web APIs&lt;/li&gt;
  &lt;li&gt;Callback Queue&lt;/li&gt;
  &lt;li&gt;Event Loop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JS Engines like V8 and SpiderMonkey in turn consists of :-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heap&lt;/li&gt;
  &lt;li&gt;Stack &lt;em&gt;(This is the same stack from the callstack that you see in the browser)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll explain this by running the following code. You can run it in your browser and see the output too.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/c1d08d566ee535d8f8b2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s examine the code.&lt;br /&gt;
We start off with some variable declaration and print &lt;code&gt;First&lt;/code&gt;. Currently you’re on some level of stack. Stacks are what’s being currently run or processed by the JS Engine.  &lt;/p&gt;

&lt;p&gt;And we have the &lt;code&gt;increase&lt;/code&gt; function which is recursive. It takes upto 10000 stack memory. The code doesn’t have to be a recursive function, any JavaScript code executes on some stack. Only what’s at the top of the stack tells us what’s currently running. You can put a debugger inside &lt;code&gt;increase&lt;/code&gt; function to see the stack increase as it calls itself over and over. The JS being a single threaded doesn’t run anything else apart from this code until it finishes. What does this tell us? This tells us that this part is still sync or blocking code.    &lt;/p&gt;

&lt;p&gt;So the &lt;code&gt;Third&lt;/code&gt; doesn’t get printed until the &lt;code&gt;increase&lt;/code&gt; loop completes. For shits and giggles, you can try to exceed the &lt;code&gt;10000&lt;/code&gt; to some ridiculous number. I believe 160000 is the maximum that Chrome allows at the moment. And if it exceeds none of the following code gets executed.  &lt;/p&gt;

&lt;p&gt;Anyway as soon as it reaches to &lt;code&gt;setTimeout&lt;/code&gt; function however, it pushes that callback function to Web API and let’s it handle what the code is doing there. Mind you that this hasn’t yet been pushed to stack. It waits for 5 secs until it can execute.&lt;br /&gt;
So, &lt;code&gt;Third&lt;/code&gt; gets printed out and we have another &lt;code&gt;setTimeout&lt;/code&gt;, well, this gets pushed to Web API as well but since it’s 0 sec you might think that it should get exectued immediately. Nope. After Web API is done with the code, it gets thrown in &lt;code&gt;Callback Queue&lt;/code&gt; and it waits its turn for &lt;code&gt;event loop&lt;/code&gt; to put it on the stack. The &lt;code&gt;event loop&lt;/code&gt; doesn’t put the &lt;code&gt;callback&lt;/code&gt; on the stack until the stack has been cleared.   &lt;/p&gt;

&lt;p&gt;So it proceeds to print &lt;code&gt;Fifth&lt;/code&gt; and finally the stack is free and &lt;code&gt;event loop&lt;/code&gt; says “okay, you’re allowed to pass to the &lt;code&gt;call stack&lt;/code&gt; now”. And then it prints &lt;code&gt;Fourth&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Meanwhile the &lt;code&gt;setTimeout&lt;/code&gt; with 5 sec delay, after 5 sec, gets pushed into the &lt;code&gt;callback queue&lt;/code&gt; and then &lt;code&gt;event loop&lt;/code&gt; pushes it to stack and &lt;code&gt;Second&lt;/code&gt; is the last one to get printed.  &lt;/p&gt;

&lt;h3 id=&quot;a-lot-to-process&quot;&gt;A lot to process?&lt;/h3&gt;
&lt;p&gt;Think of JavaScript as your Post man and think of all the events as all the letters that Post Man has to deliver. Well, your Post Man doesn’t really read all your letters. He just needs to now where to put it like Web API or database query which is handled by other processes. The letters could be something that you need to read…and if it’s a bill and you need to mail back the check then you need to write down the check and then mail them from the Post Office. All this work is taken care by you (let’s call you a Web API or ajax or any database query) and Post Man, aka js, just goes and does his business.&lt;/p&gt;

&lt;p&gt;Back to our Post Office. Let’s say your post box delivers mails as soon as it’s being handed to them. And you hand him the mail that has check that you just made out to your electricity provider. This futuristic post office is like &lt;code&gt;callback queue&lt;/code&gt; in browsers. And then it gets deilvered which one came to the Post Office first. And the process continues.&lt;/p&gt;

&lt;p&gt;Now let’s say the postman is stuck in the traffic. This can be thought of as blocking code in js. &lt;code&gt;increase&lt;/code&gt; is such type of code which is why many people often discourage writing memory intensive code in JavaScript but really, what they’re saying is not to write blocking codes if you can avoid it. &lt;/p&gt;

&lt;p&gt;There are very good reasons to write sync/blocking code and there are times when it’s just not needed. But anyway, this requires a blog post of it’s own. I hope this somewhat clarifies how JavaScript works the way it does. &lt;/p&gt;
</description>
        <pubDate>Sun, 19 Oct 2014 21:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/javascript/browser/v8/node/2014/10/19/event-loop/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/javascript/browser/v8/node/2014/10/19/event-loop/</guid>
      </item>
    
      <item>
        <title>transitioning to vim</title>
        <description>&lt;p&gt;A rather late post but I’ve been trying to move my workflow from Sublime Text to Vim. I don’t have any complains about Sublime Text. In fact, it’s the first text editor that I fell in love with. I still use Sublime Text in Windows (I use both Windows and Linux, shock !, I know) but I found it more natural to use Vim in Linux. Also, one of the compellling reason for me to move to Vim was because of the plugin called ‘Vundle’.&lt;br /&gt;
Vundle is a plugin manager. All you have to do is update your &lt;code&gt;.vimrc&lt;/code&gt; and then Vundle takes care of installing, cleaning, managing(a little bit) plugins for you. I’m not going to talk about installing, managing and all the feature of vundle here. I’ll just leave my &lt;code&gt;.vimrc&lt;/code&gt;. You are more than welcome to fork it and use it to your liking.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/e33c4b67446cf7bc1eaa.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sat, 04 Oct 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/vim/vundle/vimrc/2014/10/04/transitioning-to-vim/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/vim/vundle/vimrc/2014/10/04/transitioning-to-vim/</guid>
      </item>
    
      <item>
        <title>revisiting new</title>
        <description>&lt;p&gt;It’s almost embarrassing at times when I go complete blank on how &lt;code&gt;new&lt;/code&gt; actually works. We don’t think much when creating instances in JavaScript. It just works. And that’s also probably why it’s so easy to forget what’s happening under the hood of this three lettered word.&lt;/p&gt;

&lt;p&gt;Basically, there are three things that’s happening under this three lettered word.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#__proto__-being-referenced&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt; being referenced&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#constructor-being-referenced&quot;&gt;&lt;code&gt;constructor&lt;/code&gt; being referenced&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Constructor-being-called-with&quot;&gt;Constructor being called with..&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proto-being-referenced-&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt; being referenced:-&lt;/h3&gt;
&lt;p&gt;Whenever we create an instance we’re always trying to create an instance from some constructor (&lt;em&gt;Constructor is just some normal JavaScript function&lt;/em&gt;). The first thing that can happen whenever we’re creating an instance is that the &lt;code&gt;__proto__&lt;/code&gt; of an instance being referenced to the prototype of the Constructor (&lt;em&gt;Remember, &lt;code&gt;__proto__&lt;/code&gt;, which is also called prototype, is different from Constructor’s prototype. &lt;code&gt;__proto__&lt;/code&gt; is a hidden property of pretty much every object in JavaScript&lt;/em&gt;). Let’s see this in action.  &lt;/p&gt;

&lt;p&gt;Let’s mimic the behavior of &lt;code&gt;new&lt;/code&gt; without using &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we just start off with a Constructor and an empty object literal.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then, &lt;code&gt;__proto__&lt;/code&gt; is referenced to prototype of Constructor.&lt;/p&gt;

&lt;h3 id=&quot;constructor-being-referenced-&quot;&gt;constructor being referenced:-&lt;/h3&gt;
&lt;p&gt;Now that the &lt;code&gt;__proto__&lt;/code&gt; is being referenced to the Constructor’s prototype, we now have to reference the instance’s constructor to the Constructor (&lt;em&gt;function&lt;/em&gt;). (&lt;em&gt;Every instance has a constructor property referencing to it’s Constructor&lt;/em&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;constructor-being-called-with-&quot;&gt;Constructor being called with:-&lt;/h3&gt;
&lt;p&gt;This IMO, is the crucial part among all three steps. This is where all the instance variables and methods gets assigned to the new instance. &lt;code&gt;new&lt;/code&gt; finally calls the Constructor function with reference to our instance. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//SomeConstructor.apply(someInstance) is valid too&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s how new works. This is an important step to learn how Inheritance works in JavaScript.&lt;/p&gt;

&lt;p&gt;Do note that &lt;code&gt;this&lt;/code&gt; inside the Constructor function is what’s telling the variables to be instance variables and functions to be methods, meaning the new instance will have a copy of these variables and functions to itself. We can also assign our functions and properties to the prototype of Constructor to make it share among instances but that’s a whole different topic for another post.&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Sep 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/javascript/intro/2014/09/05/revisiting-new/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/javascript/intro/2014/09/05/revisiting-new/</guid>
      </item>
    
      <item>
        <title>barebone unit testing in angular with mocha</title>
        <description>&lt;p&gt;&lt;em&gt;tl;dr:- wanted to do testing in angular, found tuts that showed dep with karma, writing without one&lt;/em&gt;&lt;br /&gt;
I’ve been trying to get my hands dirty on angular and while the tutorial in the official angular site showed some testing code, it never showed how to set one up. So, like any person I started googling for a quick tutorial on setting up unit testing for angular but every tutorial that I found wanted me to install &lt;code&gt;karma&lt;/code&gt; first. I’ve played with &lt;code&gt;karma&lt;/code&gt; before and didn’t really see the point of needing &lt;code&gt;karma&lt;/code&gt; for quick unit testing. As &lt;a href=&quot;https://twitter.com/vojtajina&quot; title=&quot;Creator of Karma&quot;&gt;Vojta Jina&lt;/a&gt; himself says, &lt;code&gt;karma&lt;/code&gt; is a test-runner, that’s it. It’s not required for your unit tests at all. It’s just something nice to have to automate the process. Below are the following things that you do indeed need:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mochajs&lt;/li&gt;
  &lt;li&gt;chaijs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the only two dependencies that you will be needing in your test code. *Of course if you’re using &lt;code&gt;jasmine&lt;/code&gt; you don’t need &lt;code&gt;chaijs&lt;/code&gt; either. But since I like freedom and &lt;code&gt;chaijs&lt;/code&gt; allows me to use any assertion library I’m gonna go ahead and use that with &lt;code&gt;mochajs&lt;/code&gt; which is just a testing &lt;code&gt;wrapper&lt;/code&gt; without any &lt;code&gt;assertion&lt;/code&gt; (that’s why chai is for).&lt;/p&gt;

&lt;p&gt;You can download &lt;code&gt;mocha&lt;/code&gt; and &lt;code&gt;chai&lt;/code&gt; with npm but for simplicity’s sake I’m gonna go ahead and just point those to cdn.  &lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;You would need:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.html
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mocha&quot;&gt;mochajs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#chai&quot;&gt;chaijs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#angular&quot;&gt;angularjs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mocha&quot;&gt;div with &lt;code&gt;mocha&lt;/code&gt; id in it&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing-style-with-optional-assertions&quot;&gt;testing style setup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-to-be-tested&quot;&gt;your_app_code.js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#test-code&quot;&gt;your_test_code.js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#running-the-tests&quot;&gt;run mocha&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order for:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;angularjs&lt;/li&gt;
  &lt;li&gt;mochajs&lt;/li&gt;
  &lt;li&gt;chaijs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;doesn’t really matter but &lt;code&gt;mocha setup&lt;/code&gt; has to come after &lt;code&gt;mochajs&lt;/code&gt;. The order for &lt;code&gt;your_app_code.js&lt;/code&gt;, &lt;code&gt;your_test_code.js&lt;/code&gt; and &lt;code&gt;run mocha&lt;/code&gt; &lt;strong&gt;absolutely matters&lt;/strong&gt;. Get that ordering wrong and you’ll spend almost 15 mins trying to debug what exactly is happening. &lt;/p&gt;

&lt;p&gt;Okay, let’s get started with the code.&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h3 id=&quot;mocha&quot;&gt;mocha&lt;/h3&gt;
&lt;p&gt;Since we’re doing this without &lt;code&gt;karma&lt;/code&gt; you would need a plain &lt;code&gt;html5&lt;/code&gt; file. We’re gonna go ahead and add &lt;code&gt;mochajs&lt;/code&gt; in the page with &lt;code&gt;mocha&lt;/code&gt; css and &lt;code&gt;div&lt;/code&gt; that &lt;code&gt;mocha&lt;/code&gt; requires which is in &lt;code&gt;line 10&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/1/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;chai&quot;&gt;chai&lt;/h3&gt;
&lt;p&gt;Now, let’s go ahead and add &lt;code&gt;chaijs&lt;/code&gt; too. &lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/2/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-style-with-optional-assertions&quot;&gt;testing style with optional assertions&lt;/h3&gt;
&lt;p&gt;I like to setup my &lt;code&gt;mocha setup&lt;/code&gt; after I include &lt;code&gt;mocha&lt;/code&gt; and &lt;code&gt;chai&lt;/code&gt; because I’m adding &lt;code&gt;var assert = chai.assert&lt;/code&gt; which requires &lt;code&gt;chaijs&lt;/code&gt;. You could have added &lt;code&gt;var assert = chai.assert&lt;/code&gt; in your test code too but I like to add them in global. It makes sense to put them in global because istead of having them to write that over and over on each of our test files you just write once and if you do need some other assertion in your file you can also include them in your individual files.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/3/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;angular&quot;&gt;angular&lt;/h3&gt;
&lt;p&gt;We now include &lt;code&gt;angular&lt;/code&gt; (You can change the version here. At the moment of writing this, this was the latest stable version).&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/4/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-to-be-tested&quot;&gt;code to be tested&lt;/h3&gt;
&lt;p&gt;Now, include the code that you want to test. This includes all your &lt;code&gt;controllers&lt;/code&gt;,&lt;code&gt;services&lt;/code&gt; everything. Here, let’s assume that I have them all in my &lt;code&gt;app.js&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/5/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;test-code&quot;&gt;test code&lt;/h3&gt;
&lt;p&gt;We finally include our &lt;code&gt;spec&lt;/code&gt; file or &lt;code&gt;test&lt;/code&gt; file on our page (Usually, I put them under test folder which is like the standard convention now but you can put wherever you want depending on your preference).&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/6/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-the-tests&quot;&gt;running the tests&lt;/h3&gt;
&lt;p&gt;We’re not done yet. We have to now tell &lt;code&gt;mocha&lt;/code&gt; to run our &lt;code&gt;tests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/7/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Open this in Firefox or Chrome(if Chrome’s giving you problem with some security issues then switch to Firefox or run it with some simple server). And see your tests passing..or failing. &lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;Sublime Text&lt;/code&gt; then you can also use the following snippet I made.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/fa546d0e6d2fe06facb5.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sun, 27 Jul 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/node/angular/chaijs/mocha/2014/07/27/barebones-unit-testing-in-angular-with-mocha/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/angular/chaijs/mocha/2014/07/27/barebones-unit-testing-in-angular-with-mocha/</guid>
      </item>
    
      <item>
        <title>when it&#39;s apt to use global</title>
        <description>&lt;p&gt;Pretty much almost any programmer that you meet would say that sticking variables to &lt;code&gt;global&lt;/code&gt; object is a bad idea. JavaScript was pretty notorious for this one. Forget to put &lt;code&gt;var&lt;/code&gt; in your variable inside the &lt;code&gt;function&lt;/code&gt; and it goes straight to the &lt;code&gt;window&lt;/code&gt;(global) object if you forgot &lt;code&gt;&#39;use strict&#39;;&lt;/code&gt; in your function or in global context. It’s still true for node but instead of &lt;code&gt;window&lt;/code&gt; object it gets added to &lt;code&gt;global&lt;/code&gt; object.&lt;br /&gt;
&lt;code&gt;Global&lt;/code&gt; is well, global object in node, just like &lt;code&gt;window&lt;/code&gt; in browsers. You can put your variables in global object by either not declaring it with &lt;code&gt;var&lt;/code&gt; or using &lt;code&gt;global&lt;/code&gt; or &lt;code&gt;GLOBAL&lt;/code&gt;. &lt;em&gt;&lt;code&gt;GLOBAL&lt;/code&gt; is just an alias for global.&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;So, let’s just demonstrate the above with some code. Create two files with the following content and then run &lt;code&gt;node index&lt;/code&gt;;&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/7ac40170e5d2606b4180.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;As you can see from the above code that we didn’t really export &lt;code&gt;someVal&lt;/code&gt; from globalMe and yet the &lt;code&gt;index.js&lt;/code&gt; was still able to find it. And as you may have already guessed it, it’s because that we’re sticking this into &lt;code&gt;global&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;Okay, so enough of the demonstration and to get to the point on the real topic at hand. Why would we ever want to use it if it’s a bad practice?&lt;br /&gt;
There are times when you just can’t avoid using &lt;code&gt;global&lt;/code&gt; object. Just recently I &lt;em&gt;had&lt;/em&gt; to use &lt;code&gt;global&lt;/code&gt; object to get my code running which brings me to another topic.  &lt;/p&gt;

&lt;h2 id=&quot;how-to-use-chaijs-in-your-mochaopts-&quot;&gt;How to use chaijs in your mocha.opts ?&lt;/h2&gt;

&lt;p&gt;I won’t go into details on what &lt;code&gt;chai&lt;/code&gt; or &lt;code&gt;mocha&lt;/code&gt; is in this post. And if you’ve been playing around with mocha then you know you can have &lt;code&gt;mocha.opts&lt;/code&gt; file in your &lt;code&gt;test&lt;/code&gt; folder which is basically options for your &lt;code&gt;mocha&lt;/code&gt; command. So instead of doing:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mocha --required should --reporter nyan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can do :-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//mocha.opts
--required should
--reporter nyan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But since &lt;code&gt;chaijs&lt;/code&gt; is a bundle of three different assertion libraries you can’t do &lt;code&gt;mocha --required chai().should&lt;/code&gt;. That’s just absurd. Your command line doesn’t invoke functions. So how do you go about achieving &lt;code&gt;chai&lt;/code&gt; with &lt;code&gt;mocha&lt;/code&gt;? Globals!!&lt;/p&gt;

&lt;p&gt;So if you create a &lt;code&gt;node_module&lt;/code&gt; with some file called..let’s say &lt;code&gt;chai-mocha-wrap.js&lt;/code&gt; with the following globals :-&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/40e6cd6728e0c39e883d.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then you should be able to do :-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//mocha.opts
--required chai-mocha
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And have chai assertion on all your mocha tests. You also have the option to use &lt;code&gt;should&lt;/code&gt;, &lt;code&gt;expect&lt;/code&gt; or &lt;code&gt;assert&lt;/code&gt; (yay freedom!!).&lt;/p&gt;

&lt;p&gt;Although, this is an ideal case for the usage of &lt;code&gt;global&lt;/code&gt; you should always, &lt;strong&gt;always&lt;/strong&gt; document why you’re using &lt;code&gt;global&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 13 Jul 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/node/chaijs/mocha/2014/07/13/apt-use-of-global/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/chaijs/mocha/2014/07/13/apt-use-of-global/</guid>
      </item>
    
      <item>
        <title>Creating chains </title>
        <description>&lt;p&gt;Just a quick tip this week. Although, most of you know about &lt;code&gt;this&lt;/code&gt; already, you can return your prototype function with &lt;code&gt;this&lt;/code&gt; to make them chainable.
Below is the snippet that will enable that:-
&lt;script src=&quot;https://gist.github.com/sinkingshriek/f12bb33a19e383c3ec53.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is technically what jQuery uses for their functions to be chainable and I just recently found out about. Makes your code lot more dynamic this way.&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Jul 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/javascript/protip/2014/07/09/creating-chains/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/javascript/protip/2014/07/09/creating-chains/</guid>
      </item>
    
      <item>
        <title>exports vs module.exports</title>
        <description>&lt;p&gt;I’ve been out for quite some time not just two weeks as I had mentioned in my last post. I decided to take a break from coding and travel a bit. I now officially love Boston, in summer atleast. Of course this is not relevant to what the topic at hand is but if you were like me who spends pretty much his entire life in front of computer then I encourage you to go travel and see new places. It will definitely open up your mind to new things. With that insightful words about life, let’s now dive into what exports and module.exports actually does.&lt;/p&gt;

&lt;p&gt;I’ll assume that you already know basics of how NodeJS uses modules, if not then I highly recommend taking a look at &lt;a href=&quot;http://wiki.commonjs.org/wiki/Modules/1.1.1&quot;&gt;CommonJS&lt;/a&gt; module which NodeJS follows.&lt;br /&gt;
So, you’ve seen people use both &lt;code&gt;exports&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; while exporting their module. Before that, let’s first uncover on what really gets exported.&lt;/p&gt;

&lt;h3 id=&quot;what-really-gets-exported&quot;&gt;What really gets exported&lt;/h3&gt;
&lt;p&gt;Quite simply, &lt;code&gt;module.exports&lt;/code&gt; is the only thing that gets exported. So how exactly does &lt;code&gt;exports&lt;/code&gt; export the module? &lt;/p&gt;

&lt;h3 id=&quot;exports-is-just-a-global-reference-to-moduleexports&quot;&gt;exports is just a global reference to module.exports&lt;/h3&gt;
&lt;p&gt;If you understand how referencing works in JavaScript then this is straight forward. &lt;code&gt;exports&lt;/code&gt; is just pointing &lt;code&gt;module.exports&lt;/code&gt; which is why you cannot reference functions or any other objects to it, if you do, then whatever that you were trying to export will simply not work because the reference has been broken. Let’s look at an example:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Calculator(x,y){
	this.x = x;
	this.y = y;
}
Calculate.prototype = {
	constructor: Calculator,
	add : function(){
		return this.x + this.y;
	},
	subtract: function(){
		return this.x - this.y;
	}
}

exports = Calculator; // This will not work.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don’t worry about the code so much except the last line. The reason that it fails, as said above, is because it’s now referencing the &lt;code&gt;Calculator&lt;/code&gt; function and since &lt;code&gt;module.exports&lt;/code&gt; is the only thing that gets exported &lt;code&gt;exports&lt;/code&gt; just sits there not knowing what to do. However, do note that the following however works:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function Calculator(x,y){
	this.x = x;
	this.y = y;
}
Calculate.prototype = {
	constructor: Calculator,
	add : function(){
		return this.x + this.y;
	},
	subtract: function(){
		return this.x - this.y;
	}
}

exports.Calculator = Calculator; //This will however work.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Think for a moment on why the above works. &lt;/p&gt;

&lt;p&gt;If you remove the veil of &lt;code&gt;exports&lt;/code&gt; then the above code is essentially doing the following:-  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports.Calculator = Calculator;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? Since you haven’t really broken the reference of &lt;code&gt;exports&lt;/code&gt; to &lt;code&gt;module.exports&lt;/code&gt; and only adding properties to &lt;code&gt;module.exports&lt;/code&gt; the above code should work.&lt;/p&gt;

&lt;p&gt;If you really want to use &lt;code&gt;exports&lt;/code&gt; and be able to reference it to your function then you can also do this:-  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module.exports = exports = Calculator;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I hope that clarifies a little on &lt;code&gt;module.exports&lt;/code&gt; and &lt;code&gt;exports&lt;/code&gt; to you. It’s just a little concept but I had the hardest time figuring out why some uses one over another. &lt;code&gt;module.exports&lt;/code&gt; is more elegant way to export the module because it’s “OOP” way. Don’t take my word for it that’s what people say. :)&lt;/p&gt;

</description>
        <pubDate>Sat, 28 Jun 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/casual/node/modules/2014/06/28/exports-vs-module-exports/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/casual/node/modules/2014/06/28/exports-vs-module-exports/</guid>
      </item>
    
      <item>
        <title>Ranges in npm.</title>
        <description>&lt;p&gt;I’ll keep this post really short as I have been quite busy and will still be for the next two weeks. &lt;/p&gt;

&lt;p&gt;So, this week in one of the JS meetup &lt;a href=&quot;https://twitter.com/mrjedmao&quot;&gt;Jed Mao&lt;/a&gt; brought up a really good point on why he uses &lt;code&gt;npm&lt;/code&gt; from the &lt;code&gt;cli&lt;/code&gt; instead of writing the package name in &lt;code&gt;package.json&lt;/code&gt; and just doing &lt;code&gt;npm install&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you want to make any sense of the paragraph below then make sure that you know what &lt;a href=&quot;http://semver.org/&quot;&gt;&lt;code&gt;semver&lt;/code&gt;&lt;/a&gt; is. &lt;/p&gt;

&lt;p&gt;Before I put forth his reasoning, I was all up for just writing our &lt;code&gt;deps&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; and just doing &lt;code&gt;npm install&lt;/code&gt; from the cli. But there are something called &lt;code&gt;ranges&lt;/code&gt; that you can specify in the version number for your dependencies so that only those dependencies that are in the range gets downloaded. The comprehensive list of ranges is posted at the link below but in summary here are the ranges that you can specify :-&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;gt;1.0.0&lt;/code&gt; :-&lt;br /&gt;
greater than a specific version number. You can also use &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&amp;gt;1.0.0  &amp;lt;2.0.0&lt;/code&gt; || &lt;code&gt;1.0.0 - 2.0.0&lt;/code&gt; :-&lt;br /&gt;
whatever the version between v1 and v2. You can use the first or the second one. Again, you can use &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; likewise.&lt;br /&gt;
&lt;code&gt;~1.0.0&lt;/code&gt; :-&lt;br /&gt;
accepts all patches, meaning &lt;code&gt;&amp;gt;=1.0.1 - &amp;lt;1.1.0&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;^1.0.0&lt;/code&gt; :-&lt;br /&gt;
accepts all pre-releases (minor release), meaning &lt;code&gt;&amp;gt;=1.0.0 - &amp;lt;2.0.0&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;1.0.x&lt;/code&gt; || &lt;code&gt;1.0.*&lt;/code&gt; || &lt;code&gt;1.0&lt;/code&gt; :-&lt;br /&gt;
accepts all the version that matches &lt;code&gt;1.0&lt;/code&gt; versions&lt;br /&gt;
&lt;code&gt;*&lt;/code&gt; || &lt;code&gt;x&lt;/code&gt; || &lt;code&gt;&quot;&quot;&lt;/code&gt; :-&lt;br /&gt;
any version whatsoever (usually the recent one)  &lt;/p&gt;

&lt;p&gt;The last one on the list was my proposal to include in the &lt;code&gt;package.json&lt;/code&gt; file so that one doesn’t have to go lookup the version number for each &lt;code&gt;dep&lt;/code&gt;. But like Jed pointed out it can have bad consequences and I was naive to even think &lt;code&gt;*&lt;/code&gt; was an option. &lt;code&gt;*&lt;/code&gt; means all the major, minor and patches. Major changes could mean that it will break your application if you rely on version specific features. &lt;/p&gt;

&lt;p&gt;So, Jed’s advice made perfect sense to me. His advice was to just use &lt;code&gt;cli&lt;/code&gt; like so :-&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install express mongodb mocha sinon grunt&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Doing the above will install the latest stable build and npm will also put the actual version name with &lt;code&gt;^&lt;/code&gt; at the prefix. Again, &lt;code&gt;^&lt;/code&gt; will install all the pre-releases and should not break your application.&lt;/p&gt;

&lt;p&gt;To keep track of your versions you can also use &lt;a href=&quot;https://gemnasium.com/&quot;&gt;Gemnasium&lt;/a&gt; as mentioned by Jed in the meetup. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/isaacs/node-semver#ranges&quot;&gt;More about ranges from Issac.&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Jun 2014 21:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/node/npm/2014/06/06/ranges-in-npm/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/npm/2014/06/06/ranges-in-npm/</guid>
      </item>
    
      <item>
        <title>How node modules actually load.</title>
        <description>&lt;p&gt;&lt;em&gt;Edit:- This post has been modified as of 2014-12-06 to correct and clarify few issues in this post&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I’ll take a break from the devtools post and post a quick info that I’ve been reading up this week.&lt;br /&gt;
Before jumping to the topic let’s first look at what module really is.&lt;/p&gt;

&lt;p&gt;In general, a module is nothing but a separated functionality (piece) of a program that gives structure to your code while adhering to two key features, &lt;strong&gt;low&lt;/strong&gt; &lt;code&gt;coupling&lt;/code&gt; and &lt;strong&gt;high&lt;/strong&gt; &lt;code&gt;cohesion&lt;/code&gt;, meaning that the piece of code that you write has very less or no dependency (&lt;strong&gt;low coupling&lt;/strong&gt;) and can be pluggable to almost any part of your other program (&lt;strong&gt;high cohesion&lt;/strong&gt;). Basically, these two terms go hand in hand and are co-related.&lt;/p&gt;

&lt;p&gt;So, think of node modules as just a JavaScript module and you plug these modules in your program like this:-  &lt;/p&gt;

&lt;p&gt;`var myModule = require(‘./myModule’);’&lt;/p&gt;

&lt;p&gt;This is what the meat of this post is going to be. What exactly is happening when you do &lt;code&gt;require&lt;/code&gt;? &lt;/p&gt;

&lt;h2 id=&quot;requiring-as-file&quot;&gt;Requiring as file&lt;/h2&gt;
&lt;p&gt;Before I go any further notice that &lt;code&gt;./&lt;/code&gt; before the module name in that require? Whenever you supply &lt;code&gt;./&lt;/code&gt; to &lt;code&gt;require&lt;/code&gt; then node will search for the module in the current working directory or also called &lt;code&gt;relative path&lt;/code&gt;. So if you had your file structure as follows:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--myRootDirectory
----index.js //let&#39;s say this is where your require(&#39;./myModule&#39;) is
----myModule.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then doing &lt;code&gt;./&lt;/code&gt; will immediately search inside the current directory. If you would feel like putting your modules in a directory then that’s perfectly fine too. Just add &lt;code&gt;./directory_name/myAnotherModule&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;requiring-core-modules&quot;&gt;Requiring core modules&lt;/h2&gt;
&lt;p&gt;Node comes with some core modules. If you simply &lt;code&gt;require(&#39;fs&#39;)&lt;/code&gt; (fs is file system core module), then node knows that it’s a core module and simply requires that.&lt;/p&gt;

&lt;h2 id=&quot;requiring-previously-installed-modules&quot;&gt;Requiring previously installed modules&lt;/h2&gt;
&lt;p&gt;There are thousands of packages in &lt;code&gt;npm&lt;/code&gt; that you can require. If you install some package in your project then you’ll notice a directory show up called &lt;code&gt;node_modules&lt;/code&gt;. To require these modules you would simple require the module name like:-  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var _ = require(&#39;lodash&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When you do this, require will try to look for &lt;code&gt;node_modules&lt;/code&gt; directory in current directory. If it does find it and the required package is installed in this directory then it simply loads from there but if it doesn’t, then it goes to the parent directory and looks for &lt;code&gt;node_modules&lt;/code&gt; there and so on and so forth until it reaches the root of the path. This is why you have to be careful where you install your package. Sometimes it can get confusing if you simply require a package and even though it’s not in your current &lt;code&gt;node_modules&lt;/code&gt; it simply works and in future that gets deleted and you have no idea why your app suddenly stopped working.&lt;/p&gt;

&lt;h2 id=&quot;requiring-as-directory&quot;&gt;Requiring as directory&lt;/h2&gt;
&lt;p&gt;As similar to requiring as file, you can also require as a directory by simply doing:-  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var _ = require(&#39;./&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you do so, then node will try to look for &lt;code&gt;package.json&lt;/code&gt; manifest file in the current directory and looks for &lt;code&gt;main&lt;/code&gt; property. &lt;code&gt;main&lt;/code&gt; property is the property in the &lt;code&gt;package.json&lt;/code&gt; file where we specify our entry file. So let’s say if you had an app then you could just do &lt;code&gt;npm start&lt;/code&gt; and then it reads the &lt;code&gt;package.json&lt;/code&gt;file for &lt;code&gt;main&lt;/code&gt; property and executes that script. But let’s move as this is a good topic for next post.&lt;br /&gt;
If however you don’t have &lt;code&gt;package.json&lt;/code&gt; file in the directory that’s specified in the require then it just automatically assumes that you have &lt;code&gt;index.js&lt;/code&gt; on that directory. &lt;strong&gt;Again, same thing for npm start too&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, do note that you don’t have to specify &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.node&lt;/code&gt;. Node looks for &lt;code&gt;.js&lt;/code&gt; or &lt;code&gt;.node&lt;/code&gt; automatically.&lt;/p&gt;

</description>
        <pubDate>Thu, 29 May 2014 21:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/node/2014/05/29/how-node-modules-load/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/2014/05/29/how-node-modules-load/</guid>
      </item>
    
  </channel>
</rss>
