<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>thisisyojan</title>
    <description>In a way, we&#39;re all spiders weaving the web.</description>
    <link>http://sinkingshriek.github.io/</link>
    <atom:link href="http://sinkingshriek.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>buffer</title>
        <description>&lt;p&gt;Before I write about &lt;code&gt;streams&lt;/code&gt; I think it’s important that I write about &lt;code&gt;buffers&lt;/code&gt; first just to give some context. &lt;code&gt;Buffers&lt;/code&gt; can be a new thing to those JavaScripters that are coming from client side because it’s not available there. So what are &lt;code&gt;buffers&lt;/code&gt; in the first place?&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Buffer&lt;/code&gt;, a term in itself is very over loaded. There can be a buffer between two strangers, buffer in a chemical solution, buffer in a railway track. But the buffer that we’re interested in computer science is a physical memory where we temporarily hold the data so that it can be moved from one place to another, usually in a smooth manner.&lt;br /&gt;
Let’s take a really common example of &lt;code&gt;buffer&lt;/code&gt;. Back when broadband wasn’t common we’d usually see videos being “buffered” on the Internet. What it’s trying to say when the video is being buffered is that the input/download is lot slower than that’s being outputted/playbacked and that is why that video is being stored in the memory first before it starts playing back for a smoother playback.&lt;/p&gt;

&lt;p&gt;So what does all this mean to us, node developers? In a really simple terms, it’s a way to hold binary data. Often times when dealing with network we’re not blessed with input being on the equal speed with the output and we need to hold some raw data to make it as smooth as possible. Here, raw or binary data can be anything from network streams to file systems. Core(client) JavaScript only was unicode friendly and even though earlier versions of &lt;code&gt;node&lt;/code&gt; used unicode to handle data it was soon realized that it didn’t play nice with binary data and hence &lt;code&gt;buffer&lt;/code&gt; was created.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;buffer&lt;/code&gt; is a core component in &lt;code&gt;node&lt;/code&gt; you don’t really have to do &lt;code&gt;require(&#39;buffer&#39;)&lt;/code&gt;. You can just start playing with buffer by doing &lt;code&gt;new Buffer(2)&lt;/code&gt;. And as you can see that &lt;code&gt;buffer&lt;/code&gt; in &lt;code&gt;node&lt;/code&gt; is a class and holds 2 bytes of data because we passed an argument of 2. &lt;code&gt;Buffer&lt;/code&gt; behaves like an array however once you specify the size it cannot be resized. No matter how much you try it’ll only hold 2 bytes of information. Speaking of which, you write to a buffer by doing:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var k = new Buffer(2);  
k.write(&#39;blah&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you execute the above code in the &lt;code&gt;node repl&lt;/code&gt; then you’ll see some funny looking characters. Those funny looking characters are binary data that we talked about earlier. &lt;code&gt;Buffer&lt;/code&gt; saves everything in raw data and you’d have to specify encoding. You can usually do &lt;code&gt;toString()&lt;/code&gt; to get the actual data but if your encoding type is something other than &lt;code&gt;utf8&lt;/code&gt; then you’d have to specify it as &lt;code&gt;toString(&#39;ascii&#39;)&lt;/code&gt; or other encoding type based on your need. By default, &lt;code&gt;node&lt;/code&gt; uses &lt;code&gt;utf8&lt;/code&gt; as an encoding type, for others, you specify.&lt;br /&gt;
The above code can also be written as:-  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var k = new Buffer(&#39;blah&#39;, &#39;utf-8&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above code is a little different from the previous one in a sense that you’re sending a string instead of an integer as a constructor parameter and setting the encoding to ‘utf-8’ on instantiation.&lt;/p&gt;

&lt;p&gt;Here’s something else that you can try:-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var k = new Buffer(11);  
k.write(&#39;i ♥ u&#39;);  
k.toString();  
k.write(&#39; man&#39;, 7, &#39;utf-8&#39;);  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, you’re setting a buffer of 11 bytes. Notice that ♥ takes 3 bytes instead of just 1 like other letters. Other encoding types also may vary on the bytes. On the third line you’ll again see &lt;code&gt;i ♥ u&lt;/code&gt; followed by weird characters and symbols. Those are again, binary data and buffer sticks with that 11 bytes and displays everything.&lt;br /&gt;
In the fourth line there I’m setting an offset of 7, meaning that it will start writing after 7 bytes of data and will write &lt;code&gt;i ♥ u man&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can play with &lt;code&gt;buffer&lt;/code&gt; more and the &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_buffer&quot;&gt;node docs&lt;/a&gt; are pretty straight forward to follow.&lt;/p&gt;

&lt;p&gt;So here is the TL;DR of this whole post:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buffer holds binary data&lt;/li&gt;
  &lt;li&gt;Is only available in &lt;code&gt;node&lt;/code&gt; and not in core js.&lt;/li&gt;
  &lt;li&gt;No need to &lt;code&gt;require(&#39;buffer&#39;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Buffers are fixed but acts like an array&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;new Buffer&lt;/code&gt; to make an instance&lt;/li&gt;
  &lt;li&gt;Can be converted to different encodings&lt;/li&gt;
  &lt;li&gt;Default is &lt;code&gt;utf-8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;usually, &lt;code&gt;toString&lt;/code&gt; to read &lt;code&gt;buffers&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, if you really want to get into details of &lt;code&gt;buffer&lt;/code&gt; here’s a really good talk by &lt;a href=&quot;https://www.youtube.com/watch?v=aJrM46yzg0Q&quot;&gt;Trevor Norris &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 08 May 2015 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/buffer/node/2015/05/08/buffer/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/buffer/node/2015/05/08/buffer/</guid>
      </item>
    
      <item>
        <title>cors</title>
        <description>&lt;p&gt;This post is going to be a little different. The core topic won’t be on JavaScript or node however, it will touch on them a little later. The primary reason for me to write this post was because we make and consume lots of APIs today and it can be frustrating at times if we don’t know some rules that apply on using them. This post will try to give you that 20,000 feet view at what &lt;em&gt;CORS&lt;/em&gt; is and how you can use it.&lt;/p&gt;

&lt;h2 id=&quot;what-is-cors&quot;&gt;What is CORS?&lt;/h2&gt;
&lt;p&gt;CORS, Cross Origin Resource Sharing, despite what &lt;em&gt;wikipedia&lt;/em&gt; says, is a mechanism that allows or restricts, cross-site (from one domain to another) sharing of the resources which was previously not possible because of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&quot;&gt;&lt;em&gt;same-origin policy&lt;/em&gt;&lt;/a&gt; implemented in browsers. With &lt;em&gt;same-origin policy&lt;/em&gt; it was only possible to make requests from one domain to another on scripts, images, stylesheets, iframes and other plugins. Any other requests like &lt;code&gt;ajax&lt;/code&gt; which has advance requests like &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and&lt;code&gt;DELETE&lt;/code&gt; are not allowed. You could still make any requests if you were on the same domain with the &lt;em&gt;same-origin policy&lt;/em&gt; but with the help of &lt;em&gt;CORS&lt;/em&gt; we are now allowed to make &lt;code&gt;ajax&lt;/code&gt; requests cross domain. (Note that I use &lt;em&gt;allow&lt;/em&gt; word a lot. It has a reason. Continue.)&lt;br /&gt;
The overall idea of &lt;em&gt;CORS&lt;/em&gt; is for the client (browser) to send it’s origin to the server and for server to determine whether to accept the request and send the proper response or not. This is done by using some custom HTTP headers that’s defined in W3C.&lt;br /&gt;
The main players in this process are browsers and servers. When I say browsers, I mean that browser implementators have to follow certain rules to make this happen as well. There are still other headers that users (person who’s making ajax request) can add to their requests as well like &lt;code&gt;withCredentials&lt;/code&gt; and other custom headers. But I won’t be covering about that here. You can read more about them on the links below.&lt;/p&gt;

&lt;h2 id=&quot;flow&quot;&gt;Flow&lt;/h2&gt;
&lt;p&gt;The flow is pretty straight forward once we learn what’s happening. In order, following are the things that happen:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You make a &lt;code&gt;XMLHttpRequest()&lt;/code&gt; to domain other than the one you’re on, aka, &lt;code&gt;Origin&lt;/code&gt;. &lt;code&gt;Origin&lt;/code&gt; constitutes of &lt;scheme&gt;://&lt;host&gt;:&lt;port&gt; e.g. http://spotify.com is different than https://spotify.com (different scheme) or http://store.spotify.com (different host) or http://spotify.com:81 (different port)  &lt;/port&gt;&lt;/host&gt;&lt;/scheme&gt;&lt;/li&gt;
  &lt;li&gt;The browser sees that you’re trying to make a request other than the same origin and adds &lt;code&gt;Origin&lt;/code&gt; header on your request.&lt;/li&gt;
  &lt;li&gt;It reaches the server. The server if it wants to allow other domain to access it’s service then it adds &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; with either the &lt;code&gt;origin&lt;/code&gt; from the request or simply &lt;code&gt;*&lt;/code&gt; which represents that it allows everyone to access it’s service. e.g. &lt;code&gt;Access-Control-Allow-Origin: http://spotify.com&lt;/code&gt; or &lt;code&gt;Access-Control-Allow-Origin: *&lt;/code&gt;. By default this is not set. You as an API developer have to set it yourself. The response is sent to the browser with or without &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The browser checks if it has &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header and checks the permission. If either the request origin or * is present on that header then it lets the response to go through and everything works normal. If not then you’ll see an error displayed on your browser console mentioning something about not being able to process the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;
&lt;p&gt;Okay, now that we got the theoretical portion covered. Let’s see it in code.&lt;/p&gt;

&lt;h3 id=&quot;on-the-client-side-&quot;&gt;On the client side:-&lt;/h3&gt;
&lt;p&gt;On client side you’d do what you’re normally familiar with. It’s also preferred if you check for &lt;code&gt;withCredentials&lt;/code&gt; property on &lt;code&gt;XMLHTTPRequest&lt;/code&gt; before making requests just to make sure that the browser supports &lt;em&gt;CORS&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var xhr = new XMLHttpRequest();
if(!&#39;withCredentials&#39; in xhr)){
  alert(&#39;No CORS!!&#39;);
  return;
}
xhr.open(&#39;GET&#39;, &#39;http://store.spotify.com&#39;); // of course this url is just an example
xhr.onerror = function(){
  alert(&#39;There was an error!!&#39;);
};
xhr.onload = function(){
  var data = JSON.parse(xhr.responseText);
  console.log(data);
};
xhr.send();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing particularly different from our regular &lt;code&gt;XHR&lt;/code&gt; request.&lt;br /&gt;
If you look at your &lt;code&gt;Network&lt;/code&gt; tab and check your &lt;code&gt;Request Headers&lt;/code&gt; you should see &lt;code&gt;Origin&lt;/code&gt; header set by the browser.&lt;/p&gt;

&lt;h3 id=&quot;on-the-server-side&quot;&gt;On the server side&lt;/h3&gt;
&lt;p&gt;I’m gonna use node for this (shocking!!) mainly &lt;code&gt;express&lt;/code&gt; because everybody should be familiar with it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var app = require(&#39;express&#39;)();  
var CORS = function(req, res, next){  
 res.set(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;);  
};  
app.use(CORS);  
app.get(&#39;/&#39;, function(req, res){  
res.json({  
  &#39;test&#39;: &#39;Hello World&#39;  
  });  
}  
);  
app.listen(3000, function(){  
  console.log(&#39;listening in 3000&#39;);  
});  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main line here is the &lt;code&gt;res.set(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)&lt;/code&gt; and &lt;code&gt;app.use(CORS)&lt;/code&gt;. In the former you’re setting a header that enables &lt;em&gt;CORS&lt;/em&gt;. You could have done &lt;code&gt;res.set(&#39;Access-Control-Allow-Origin&#39;:&#39;http://mysiteonly.com&#39;&lt;/code&gt; if you want to allow only specific sites to have access to your resources.
In the latter, it’s just a middleware that is gone through on every request making sure there’s &lt;em&gt;CORS&lt;/em&gt; header on your every response.
And to reiterate, this header is seen by browser when the response reaches it and based on the permission level, it allows or denies the request. On denial or no &lt;em&gt;CORS&lt;/em&gt; header it fires up the &lt;code&gt;onerror&lt;/code&gt; event that you set in the client before.&lt;/p&gt;

&lt;p&gt;This was just a brief introduction to &lt;em&gt;CORS&lt;/em&gt;. There are many other things that are still uncovered in this post. &lt;code&gt;HTML5 Canvas&lt;/code&gt;, &lt;code&gt;preflight request&lt;/code&gt; and &lt;code&gt;withCredentials&lt;/code&gt; comes to mind. For more info on them check out following resources.&lt;/p&gt;

&lt;p&gt;More resources:-  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://manning.com/hossain/&quot;&gt;CORS in Action (book)&lt;/a&gt; &lt;em&gt;use coupon code(hossainco) for 39% discount&lt;/em&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;MDN&lt;/a&gt;  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/cors/&quot;&gt;HTML5 Rocks&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/cors/browser/xhr/2015/04/19/cors/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/cors/browser/xhr/2015/04/19/cors/</guid>
      </item>
    
      <item>
        <title>EventEmitter</title>
        <description>&lt;p&gt;Before even describing what Event Emitter is, I think it’s important to note that Event Emitter is one of the fundamental concept in, not only node, but in JavaScript in general. In layman terms, Event Emitter is pretty much(well, partly) &lt;code&gt;addEventListener&lt;/code&gt; in client-side JavaScript where we attach events like &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;keydown&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, etc but with higher abstraction.&lt;br /&gt;
It is also very much used to decouple the code and avoid the callback hell. If you’re still not convinced enough then feel free to google. It’s also inherited by the &lt;code&gt;stream&lt;/code&gt; module which merits a seperate post in itself.  &lt;/p&gt;

&lt;h2 id=&quot;what-is-eventemitter&quot;&gt;What is EventEmitter?&lt;/h2&gt;
&lt;p&gt;I’ve already hinted what EventEmitter is above, but let’s go a little deeper. As you know already that the &lt;code&gt;WebAPI&lt;/code&gt; gives you few predefined events (click, load, keydown, etc) by default. With EventEmitter, you can make your own events. The events can have any names as you please (but make it meaningful). If I wanted to have an event called ‘callMeOnlyWhenNeededPlease’, you absolutely can. The syntax is the same as you’re used to from the client-side JavaScript. So what’s the difference between the browser &lt;code&gt;attachEventListener&lt;/code&gt; and this one? Apart from being able to create your own &lt;code&gt;events&#39;&lt;/code&gt; not much. Browser level JavaScript just hides the implementation but EventEmitter exposes that for you. That’s the main difference. However, you can absolutely simulate the EventEmitter module in browser by either using jQuery’s &lt;code&gt;trigger&lt;/code&gt; method or DOM API which is &lt;a href=&quot;http://www.2ality.com/2013/06/triggering-events.html&quot;&gt;explained here&lt;/a&gt;. Or if you want to do it in plain JavaScript then goto the &lt;a href=&quot;#deep-dive&quot;&gt;Deep Dive&lt;/a&gt; section.
Okay, let’s look at an example on how it exactly works to get the feel of syntax.&lt;/p&gt;

&lt;p&gt;Here are all the &lt;a href=&quot;http://nodejs.org/api/events.html&quot;&gt;methods and properties&lt;/a&gt; that EventEmitter exposes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var EventEmitter = require(&#39;events&#39;).EventEmitter;
var eventEmitter = new EventEmitter();

  // `on` is just an alias for addEventListener
// you could have easily done eventEmitter.addEventListener too
eventEmitter.on(&#39;callMeOnlyWhenNeeded&#39;, function(){
     console.log(&#39;I&#39;ve been summoned);
});
eventEmitter.emit(&#39;callMeOnlyWhenNeeded&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This should look familiar to you if you already use ‘addEventListener’. In fact, it’s the same. You have your event name on your first argument and then the callback or function to be invoked(listener) when that event is invoked.&lt;br /&gt;
We invoke or call events using &lt;code&gt;emit&lt;/code&gt; method from &lt;code&gt;EventEmitter&lt;/code&gt;. Really straight forward. As mentioned above, there are more than &lt;code&gt;on&lt;/code&gt; or &lt;code&gt;addEventListener&lt;/code&gt; methods in EventEmitter. Most frequently used are &lt;code&gt;once&lt;/code&gt; and &lt;code&gt;removeListener&lt;/code&gt;. The latter is pretty self-explainatory and the prior is called only once and is removed after being invoked.&lt;br /&gt;
Protip:- It’s good practice to have &lt;code&gt;error&lt;/code&gt; event attached on all your EventEmitter, if you don’t and someone tries to call event called &lt;code&gt;error&lt;/code&gt; then it just throws &lt;code&gt;Uncaught, unspecified &quot;error&quot; event.&lt;/code&gt;.  &lt;/p&gt;

&lt;h2 id=&quot;deep-dive&quot;&gt;Deep Dive&lt;/h2&gt;
&lt;p&gt;Let’s now try to see what exactly is happening behind the scene. You’re free to look at the source code of node too if that’s what you prefer but I’ll try present it in much simpler fashion.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fahovu/1/embed?js,console&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Surprised on how simple the implementation is? Well, because it is and also I trimmed the code a lot to just give the core concept. There’s definitely no error handling, arguments handling and many methods are not included on above code but that’s the basic concept. This clever but simple pattern can make your code really easy to read and have much more control over your program. &lt;/p&gt;

&lt;p&gt;*Although, io.js is out already I have referenced node’s official API. Nothing much has changed in io.js in this field but feel free to make a comparison &lt;a href=&quot;https://iojs.org/api/events.html&quot;&gt;there&lt;/a&gt;. *&lt;/p&gt;
</description>
        <pubDate>Fri, 06 Feb 2015 19:34:19 -0600</pubDate>
        <link>http://sinkingshriek.github.io/node/basics/event-emitter/2015/02/06/event-emitters/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/basics/event-emitter/2015/02/06/event-emitters/</guid>
      </item>
    
      <item>
        <title>funxtion - a prototype util tool</title>
        <description>&lt;p&gt;Funxtion is a utility tool that I created out of frustration to make any function in a file be able to execute from the cli without needing for the developer to create a seperate file just so s/he can test out his/her idea in node.
Although there are number of prototyping tools like &lt;a href=&quot;http://requirebin.com&quot;&gt;requirebin.com&lt;/a&gt;, &lt;a href=&quot;http://c9.io&quot;&gt;c9.io&lt;/a&gt;, &lt;a href=&quot;http://runable.com&quot;&gt;runnable&lt;/a&gt; and more, none of them felt faster, flexible and more native than running it locally on my computer. However, there was one caveat to this. I had to create a seperate file everytime just to quickly prototype some idea. This is not a big deal at first but as time goes by these zombie prototype files just starts piling up and starts producing clutter in my computer. I wish there was something like &lt;code&gt;Ctrl+Shift+J&lt;/code&gt; in browser for client side JavaScript but for now I will settle with &lt;code&gt;funxtion&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Again, I can’t emphasize this enough. This tool is highly for prototype only but if you do find some other usage of it then feel free to explore and experiment.  &lt;/p&gt;

&lt;p&gt;You can find and read more about &lt;code&gt;funxtion&lt;/code&gt; on the following links.&lt;br /&gt;
&lt;a href=&quot;https://www.npmjs.com/package/funxtion&quot;&gt;npm&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/sinkingshriek/funxtion&quot;&gt;github&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/sinkingshriek/funxtion/blob/master/readme.md&quot;&gt;readme&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Dec 2014 19:34:19 -0600</pubDate>
        <link>http://sinkingshriek.github.io/node/npm/utility/2014/12/31/funxtion/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/npm/utility/2014/12/31/funxtion/</guid>
      </item>
    
      <item>
        <title>pro-tip while installing from npm</title>
        <description>&lt;p&gt;Usually, I start off my project with &lt;code&gt;npm init&lt;/code&gt; to get the &lt;code&gt;package.json&lt;/code&gt; manifest file in the current working directory but recently for a quick prototype I skipped that process and tried installing some packages when I noticed something peculiar. All my packages was getting installed in the parent/parent directory. After much research, I finally figured out that I had &lt;code&gt;package.json&lt;/code&gt; on my parent/parent directory and that’s why it wasn’t installing in the current working directory. &lt;/p&gt;

&lt;p&gt;So pro-tip, start with &lt;code&gt;npm init&lt;/code&gt; to not waste &lt;strong&gt;30 MINUTES OF YOUR LIFE&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Dec 2014 19:34:19 -0600</pubDate>
        <link>http://sinkingshriek.github.io/node/npm/pro-tip/2014/12/05/pro-tip-while-installing-from-npm/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/npm/pro-tip/2014/12/05/pro-tip-while-installing-from-npm/</guid>
      </item>
    
      <item>
        <title>quick overview of partial application</title>
        <description>&lt;p&gt;One of the thing that I like most about JavaScript is that it can also be written in a functional way and partial application is one of them. &lt;/p&gt;

&lt;h2 id=&quot;what-is-partial-application&quot;&gt;What is Partial Application?&lt;/h2&gt;

&lt;p&gt;If you look at the name itself then it should give a &lt;em&gt;partial&lt;/em&gt; hint on what a partial application is. Partial Application is a way of partially filling a function with arguments early on and be able to use that information in the later part of your application. It is mostly possible because of closure.&lt;br /&gt;
To have a partial function we first need a wrapper function which takes, either left or right argument as a function to apply the partial application to. The arguments provided early on are held for the entirety of application due to the help of closure while a complete new function is returned with the bounded function (also passed in as a parameter) being invoked with the partial(arguments passed early on) and later arguments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note that there are different variation of partial applications. Left, right and full application. But we’ll just talk about left partial application here as that’s the most commonly used and easy to understand.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage:&lt;/h2&gt;

&lt;p&gt;Partial Application is pretty powerful if you know how to use it. I mostly use it when I have a repeated task which produces different output based on the provided input (parameters). And because functions are first class citizens in JavaScript, it becomes even more powerful as you can inject your custom function to the already predefined one. &lt;/p&gt;

&lt;p&gt;Let’s see this in code:-&lt;/p&gt;

&lt;p&gt;Let’s say we want to have a function that adds 1 to all the arrays on the given argument.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var addArray = function(arr){
	arr.forEach(function(i){
		console.log(++i);
	})
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you realize that after some times you want to do more with arrays, let’s say mulitply them by 2.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var multiplyArray = function(arr){
	arr.forEach(function(i){
		console.log(i*2);
	})
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now instead of making a seperate function and iterating over the array over and over, you can create a generic partial function to iterate over the array and then just perform your task by giving the callback to the partial function. Let’s see that in action.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//First we create a partial function generator
var partial = function(fn){
	var self = this,
		arg = Array.prototype.slice.call(arguments, 1);
	return function(){
		var allArgs = args.concat(Array.prototype.slice.call(arguments));
		fn.apply(self, allArgs);
	};
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you fairly know about JavaScript then it’s not that hard to get your head around what’s happening on the above code. Probably just a pattern that you haven’t thought about before. But let’s see what’s happening anyway.&lt;/p&gt;

&lt;p&gt;We start with regular &lt;code&gt;function expression&lt;/code&gt; with one parameter, this is the parameter that accepts function to be bounded or partialized (not the official terminology).&lt;br /&gt;
Inside the function we hold all the arguments other than the &lt;code&gt;fn&lt;/code&gt; or the first one (&lt;em&gt;by hold I mean it will be remembered even after the function returns because we’re returning a function&lt;/em&gt;). These are the arguments that you want to be prefilled for further usage in your application.  &lt;br /&gt;
On the return statment we’re accepting more parameters to be filled on the latter part of our application and we finally invoke the &lt;em&gt;partialized&lt;/em&gt; function with all the parameters (with prefilled and latter filled)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Now we make our repetitive function into a partial function
//But we have to modify our function a little
var loopArray = function(arr){
	arr.forEach(Array.prototype.slice.call(arguments, 1)[0]);
};

//Now let&#39;s make a partial function
var partialized = partial(loopArray, [1,2,3,4]);
//We can now use partialized function to accept any callbacks
//on the prefilled iteration

//Our initial adder function
var addArray = function(arr){
	console.log(++arg);
}

//Using the partial function
partialized(addArray);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s slow down and explain what I’m doing. The &lt;code&gt;loopArray&lt;/code&gt; function is made in such a way that the second parameter is treated as a callback for our &lt;code&gt;forEach&lt;/code&gt;. You could also do :-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var loopArray = function(arr, callback){
	arr.forEach(callback);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But it’s totally upto you. The &lt;code&gt;arguments&lt;/code&gt; way can be a little vague but is more dynamic, meaning you have to do little to change in your code to change the behavior of your function while the explicit declaration of parameter is more rigid but more clear.&lt;br /&gt;
Anyway, the point here is we’re in agreement that the second argument will be a callback. On &lt;code&gt;partialized function&lt;/code&gt; expression we specify the array that we want to be prefilled. This parameter is going to be used with all the function that uses this partial application.&lt;br /&gt;
Now, we just create callbacks and pass it to the partial application as we’re doing with &lt;code&gt;partialized(addArray)&lt;/code&gt; &lt;code&gt;addArray&lt;/code&gt; here is our callback function.&lt;/p&gt;

&lt;p&gt;Although this is not the greatest example of partial application, I just wanted to show a bit practical example other than just adding 1 to a number like you see in other posts.&lt;/p&gt;

&lt;p&gt;You can do the same for multiply too. You can play more on the jsbin below.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/dihobi/1/embed?js,console&quot;&gt;JS Bin&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;You can read more about right, full partial and other cool stuff on the links below:-&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://benalman.com/news/2012/09/partial-application-in-javascript/&quot;&gt;http://benalman.com/news/2012/09/partial-application-in-javascript/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://ejohn.org/blog/partial-functions-in-javascript/&quot;&gt;http://ejohn.org/blog/partial-functions-in-javascript/&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Nov 2014 20:34:19 -0600</pubDate>
        <link>http://sinkingshriek.github.io/partial-application/javascript/2014/11/25/quick-overview-of-partial-application/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/partial-application/javascript/2014/11/25/quick-overview-of-partial-application/</guid>
      </item>
    
      <item>
        <title>event loop and related</title>
        <description>&lt;p&gt;So, recently I watched the talk from &lt;a href=&quot;https://www.youtube.com/watch?v=8aGhZQkoFbQ&quot;&gt;Philip Roberts&lt;/a&gt;. If you have time then I highly recommed that you watch that talk instead of reading this because I am just going to summarize from that talk. You can think of this as TL;DW version of that talk.&lt;/p&gt;

&lt;p&gt;Okay, let’s just dive in and see how JavaScript actually works and how this event loop and others play part (I’m going to assume that you already know that JS is single threaded and concurrent language). &lt;/p&gt;

&lt;p&gt;Probably the most crucial part for me that clicked to understand how JavaScript really works the way it does was that Web Browsers or NodeJS consists of many components. Those components are V8, SpiderMonkey, Chakra, Crackan or any other JavaScript engine, APIs (this is your DOM, ajax, filesystem and other APIs that Web Browsers or NodeJS provide you, you can find more &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API&quot;&gt;Web API here&lt;/a&gt; and &lt;a href=&quot;http://nodejs.org/api/&quot;&gt;Node API here&lt;/a&gt;), a callback queue and finally an event loop. There might be more but these are pretty much the basics. &lt;/p&gt;

&lt;p&gt;For simplicity’s sake I’ll just talk about browsers but it applies to server-side part of JavaScript too.&lt;br /&gt;
Okay, so browsers consists of :-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JS Engine&lt;/li&gt;
  &lt;li&gt;Web APIs&lt;/li&gt;
  &lt;li&gt;Callback Queue&lt;/li&gt;
  &lt;li&gt;Event Loop&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JS Engines like V8 and SpiderMonkey in turn consists of :-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Heap&lt;/li&gt;
  &lt;li&gt;Stack &lt;em&gt;(This is the same stack from the callstack that you see in the browser)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll explain this by running the following code. You can run it in your browser and see the output too.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/c1d08d566ee535d8f8b2.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s examine the code.&lt;br /&gt;
We start off with some variable declaration and print &lt;code&gt;First&lt;/code&gt;. Currently you’re on some level of stack. Stacks are what’s being currently run or processed by the JS Engine.  &lt;/p&gt;

&lt;p&gt;And we have the &lt;code&gt;increase&lt;/code&gt; function which is recursive. It takes upto 10000 stack memory. The code doesn’t have to be a recursive function, any JavaScript code executes on some stack. Only what’s at the top of the stack tells us what’s currently running. You can put a debugger inside &lt;code&gt;increase&lt;/code&gt; function to see the stack increase as it calls itself over and over. The JS being a single threaded doesn’t run anything else apart from this code until it finishes. What does this tell us? This tells us that this part is still sync or blocking code.    &lt;/p&gt;

&lt;p&gt;So the &lt;code&gt;Third&lt;/code&gt; doesn’t get printed until the &lt;code&gt;increase&lt;/code&gt; loop completes. For shits and giggles, you can try to exceed the &lt;code&gt;10000&lt;/code&gt; to some ridiculous number. I believe 160000 is the maximum that Chrome allows at the moment. And if it exceeds none of the following code gets executed.  &lt;/p&gt;

&lt;p&gt;Anyway as soon as it reaches to &lt;code&gt;setTimeout&lt;/code&gt; function however, it pushes that callback function to Web API and let’s it handle what the code is doing there. Mind you that this hasn’t yet been pushed to stack. It waits for 5 secs until it can execute.&lt;br /&gt;
So, &lt;code&gt;Third&lt;/code&gt; gets printed out and we have another &lt;code&gt;setTimeout&lt;/code&gt;, well, this gets pushed to Web API as well but since it’s 0 sec you might think that it should get exectued immediately. Nope. After Web API is done with the code, it gets thrown in &lt;code&gt;Callback Queue&lt;/code&gt; and it waits its turn for &lt;code&gt;event loop&lt;/code&gt; to put it on the stack. The &lt;code&gt;event loop&lt;/code&gt; doesn’t put the &lt;code&gt;callback&lt;/code&gt; on the stack until the stack has been cleared.   &lt;/p&gt;

&lt;p&gt;So it proceeds to print &lt;code&gt;Fifth&lt;/code&gt; and finally the stack is free and &lt;code&gt;event loop&lt;/code&gt; says “okay, you’re allowed to pass to the &lt;code&gt;call stack&lt;/code&gt; now”. And then it prints &lt;code&gt;Fourth&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;Meanwhile the &lt;code&gt;setTimeout&lt;/code&gt; with 5 sec delay, after 5 sec, gets pushed into the &lt;code&gt;callback queue&lt;/code&gt; and then &lt;code&gt;event loop&lt;/code&gt; pushes it to stack and &lt;code&gt;Second&lt;/code&gt; is the last one to get printed.  &lt;/p&gt;

&lt;h3 id=&quot;a-lot-to-process&quot;&gt;A lot to process?&lt;/h3&gt;
&lt;p&gt;Think of JavaScript as your Post man and think of all the events as all the letters that Post Man has to deliver. Well, your Post Man doesn’t really read all your letters. He just needs to now where to put it like Web API or database query which is handled by other processes. The letters could be something that you need to read…and if it’s a bill and you need to mail back the check then you need to write down the check and then mail them from the Post Office. All this work is taken care by you (let’s call you a Web API or ajax or any database query) and Post Man, aka js, just goes and does his business.&lt;/p&gt;

&lt;p&gt;Back to our Post Office. Let’s say your post box delivers mails as soon as it’s being handed to them. And you hand him the mail that has check that you just made out to your electricity provider. This futuristic post office is like &lt;code&gt;callback queue&lt;/code&gt; in browsers. And then it gets deilvered which one came to the Post Office first. And the process continues.&lt;/p&gt;

&lt;p&gt;Now let’s say the postman is stuck in the traffic. This can be thought of as blocking code in js. &lt;code&gt;increase&lt;/code&gt; is such type of code which is why many people often discourage writing memory intensive code in JavaScript but really, what they’re saying is not to write blocking codes if you can avoid it. &lt;/p&gt;

&lt;p&gt;There are very good reasons to write sync/blocking code and there are times when it’s just not needed. But anyway, this requires a blog post of it’s own. I hope this somewhat clarifies how JavaScript works the way it does. &lt;/p&gt;
</description>
        <pubDate>Sun, 19 Oct 2014 21:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/javascript/browser/v8/node/2014/10/19/event-loop/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/javascript/browser/v8/node/2014/10/19/event-loop/</guid>
      </item>
    
      <item>
        <title>transitioning to vim</title>
        <description>&lt;p&gt;A rather late post but I’ve been trying to move my workflow from Sublime Text to Vim. I don’t have any complains about Sublime Text. In fact, it’s the first text editor that I fell in love with. I still use Sublime Text in Windows (I use both Windows and Linux, shock !, I know) but I found it more natural to use Vim in Linux. Also, one of the compellling reason for me to move to Vim was because of the plugin called ‘Vundle’.&lt;br /&gt;
Vundle is a plugin manager. All you have to do is update your &lt;code&gt;.vimrc&lt;/code&gt; and then Vundle takes care of installing, cleaning, managing(a little bit) plugins for you. I’m not going to talk about installing, managing and all the feature of vundle here. I’ll just leave my &lt;code&gt;.vimrc&lt;/code&gt;. You are more than welcome to fork it and use it to your liking.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/e33c4b67446cf7bc1eaa.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sat, 04 Oct 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/vim/vundle/vimrc/2014/10/04/transitioning-to-vim/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/vim/vundle/vimrc/2014/10/04/transitioning-to-vim/</guid>
      </item>
    
      <item>
        <title>revisiting new</title>
        <description>&lt;p&gt;It’s almost embarrassing at times when I go complete blank on how &lt;code&gt;new&lt;/code&gt; actually works. We don’t think much when creating instances in JavaScript. It just works. And that’s also probably why it’s so easy to forget what’s happening under the hood of this three lettered word.&lt;/p&gt;

&lt;p&gt;Basically, there are three things that’s happening under this three lettered word.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#__proto__-being-referenced&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt; being referenced&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#constructor-being-referenced&quot;&gt;&lt;code&gt;constructor&lt;/code&gt; being referenced&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#Constructor-being-called-with&quot;&gt;Constructor being called with..&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;proto-being-referenced-&quot;&gt;&lt;code&gt;__proto__&lt;/code&gt; being referenced:-&lt;/h3&gt;
&lt;p&gt;Whenever we create an instance we’re always trying to create an instance from some constructor (&lt;em&gt;Constructor is just some normal JavaScript function&lt;/em&gt;). The first thing that can happen whenever we’re creating an instance is that the &lt;code&gt;__proto__&lt;/code&gt; of an instance being referenced to the prototype of the Constructor (&lt;em&gt;Remember, &lt;code&gt;__proto__&lt;/code&gt;, which is also called prototype, is different from Constructor’s prototype. &lt;code&gt;__proto__&lt;/code&gt; is a hidden property of pretty much every object in JavaScript&lt;/em&gt;). Let’s see this in action.  &lt;/p&gt;

&lt;p&gt;Let’s mimic the behavior of &lt;code&gt;new&lt;/code&gt; without using &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we just start off with a Constructor and an empty object literal.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then, &lt;code&gt;__proto__&lt;/code&gt; is referenced to prototype of Constructor.&lt;/p&gt;

&lt;h3 id=&quot;constructor-being-referenced-&quot;&gt;constructor being referenced:-&lt;/h3&gt;
&lt;p&gt;Now that the &lt;code&gt;__proto__&lt;/code&gt; is being referenced to the Constructor’s prototype, we now have to reference the instance’s constructor to the Constructor (&lt;em&gt;function&lt;/em&gt;). (&lt;em&gt;Every instance has a constructor property referencing to it’s Constructor&lt;/em&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;constructor-being-called-with-&quot;&gt;Constructor being called with:-&lt;/h3&gt;
&lt;p&gt;This IMO, is the crucial part among all three steps. This is where all the instance variables and methods gets assigned to the new instance. &lt;code&gt;new&lt;/code&gt; finally calls the Constructor function with reference to our instance. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__proto__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;constructor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;SomeConstructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;someInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//SomeConstructor.apply(someInstance) is valid too&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s how new works. This is an important step to learn how Inheritance works in JavaScript.&lt;/p&gt;

&lt;p&gt;Do note that &lt;code&gt;this&lt;/code&gt; inside the Constructor function is what’s telling the variables to be instance variables and functions to be methods, meaning the new instance will have a copy of these variables and functions to itself. We can also assign our functions and properties to the prototype of Constructor to make it share among instances but that’s a whole different topic for another post.&lt;/p&gt;

</description>
        <pubDate>Fri, 05 Sep 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/javascript/intro/2014/09/05/revisiting-new/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/javascript/intro/2014/09/05/revisiting-new/</guid>
      </item>
    
      <item>
        <title>barebone unit testing in angular with mocha</title>
        <description>&lt;p&gt;&lt;em&gt;tl;dr:- wanted to do testing in angular, found tuts that showed dep with karma, writing without one&lt;/em&gt;&lt;br /&gt;
I’ve been trying to get my hands dirty on angular and while the tutorial in the official angular site showed some testing code, it never showed how to set one up. So, like any person I started googling for a quick tutorial on setting up unit testing for angular but every tutorial that I found wanted me to install &lt;code&gt;karma&lt;/code&gt; first. I’ve played with &lt;code&gt;karma&lt;/code&gt; before and didn’t really see the point of needing &lt;code&gt;karma&lt;/code&gt; for quick unit testing. As &lt;a href=&quot;https://twitter.com/vojtajina&quot; title=&quot;Creator of Karma&quot;&gt;Vojta Jina&lt;/a&gt; himself says, &lt;code&gt;karma&lt;/code&gt; is a test-runner, that’s it. It’s not required for your unit tests at all. It’s just something nice to have to automate the process. Below are the following things that you do indeed need:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mochajs&lt;/li&gt;
  &lt;li&gt;chaijs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are the only two dependencies that you will be needing in your test code. *Of course if you’re using &lt;code&gt;jasmine&lt;/code&gt; you don’t need &lt;code&gt;chaijs&lt;/code&gt; either. But since I like freedom and &lt;code&gt;chaijs&lt;/code&gt; allows me to use any assertion library I’m gonna go ahead and use that with &lt;code&gt;mochajs&lt;/code&gt; which is just a testing &lt;code&gt;wrapper&lt;/code&gt; without any &lt;code&gt;assertion&lt;/code&gt; (that’s why chai is for).&lt;/p&gt;

&lt;p&gt;You can download &lt;code&gt;mocha&lt;/code&gt; and &lt;code&gt;chai&lt;/code&gt; with npm but for simplicity’s sake I’m gonna go ahead and just point those to cdn.  &lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;You would need:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;index.html
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#mocha&quot;&gt;mochajs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#chai&quot;&gt;chaijs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#angular&quot;&gt;angularjs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mocha&quot;&gt;div with &lt;code&gt;mocha&lt;/code&gt; id in it&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#testing-style-with-optional-assertions&quot;&gt;testing style setup&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#code-to-be-tested&quot;&gt;your_app_code.js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#test-code&quot;&gt;your_test_code.js&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#running-the-tests&quot;&gt;run mocha&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order for:-&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;angularjs&lt;/li&gt;
  &lt;li&gt;mochajs&lt;/li&gt;
  &lt;li&gt;chaijs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;doesn’t really matter but &lt;code&gt;mocha setup&lt;/code&gt; has to come after &lt;code&gt;mochajs&lt;/code&gt;. The order for &lt;code&gt;your_app_code.js&lt;/code&gt;, &lt;code&gt;your_test_code.js&lt;/code&gt; and &lt;code&gt;run mocha&lt;/code&gt; &lt;strong&gt;absolutely matters&lt;/strong&gt;. Get that ordering wrong and you’ll spend almost 15 mins trying to debug what exactly is happening. &lt;/p&gt;

&lt;p&gt;Okay, let’s get started with the code.&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;h3 id=&quot;mocha&quot;&gt;mocha&lt;/h3&gt;
&lt;p&gt;Since we’re doing this without &lt;code&gt;karma&lt;/code&gt; you would need a plain &lt;code&gt;html5&lt;/code&gt; file. We’re gonna go ahead and add &lt;code&gt;mochajs&lt;/code&gt; in the page with &lt;code&gt;mocha&lt;/code&gt; css and &lt;code&gt;div&lt;/code&gt; that &lt;code&gt;mocha&lt;/code&gt; requires which is in &lt;code&gt;line 10&lt;/code&gt;  &lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/1/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;chai&quot;&gt;chai&lt;/h3&gt;
&lt;p&gt;Now, let’s go ahead and add &lt;code&gt;chaijs&lt;/code&gt; too. &lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/2/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;testing-style-with-optional-assertions&quot;&gt;testing style with optional assertions&lt;/h3&gt;
&lt;p&gt;I like to setup my &lt;code&gt;mocha setup&lt;/code&gt; after I include &lt;code&gt;mocha&lt;/code&gt; and &lt;code&gt;chai&lt;/code&gt; because I’m adding &lt;code&gt;var assert = chai.assert&lt;/code&gt; which requires &lt;code&gt;chaijs&lt;/code&gt;. You could have added &lt;code&gt;var assert = chai.assert&lt;/code&gt; in your test code too but I like to add them in global. It makes sense to put them in global because istead of having them to write that over and over on each of our test files you just write once and if you do need some other assertion in your file you can also include them in your individual files.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/3/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;angular&quot;&gt;angular&lt;/h3&gt;
&lt;p&gt;We now include &lt;code&gt;angular&lt;/code&gt; (You can change the version here. At the moment of writing this, this was the latest stable version).&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/4/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;code-to-be-tested&quot;&gt;code to be tested&lt;/h3&gt;
&lt;p&gt;Now, include the code that you want to test. This includes all your &lt;code&gt;controllers&lt;/code&gt;,&lt;code&gt;services&lt;/code&gt; everything. Here, let’s assume that I have them all in my &lt;code&gt;app.js&lt;/code&gt; file. &lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/5/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;test-code&quot;&gt;test code&lt;/h3&gt;
&lt;p&gt;We finally include our &lt;code&gt;spec&lt;/code&gt; file or &lt;code&gt;test&lt;/code&gt; file on our page (Usually, I put them under test folder which is like the standard convention now but you can put wherever you want depending on your preference).&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/6/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-the-tests&quot;&gt;running the tests&lt;/h3&gt;
&lt;p&gt;We’re not done yet. We have to now tell &lt;code&gt;mocha&lt;/code&gt; to run our &lt;code&gt;tests&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/fiqoze/7/embed?html&quot;&gt;MySite&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Open this in Firefox or Chrome(if Chrome’s giving you problem with some security issues then switch to Firefox or run it with some simple server). And see your tests passing..or failing. &lt;/p&gt;

&lt;p&gt;If you use &lt;code&gt;Sublime Text&lt;/code&gt; then you can also use the following snippet I made.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/sinkingshriek/fa546d0e6d2fe06facb5.js&quot;&gt;&lt;/script&gt;

</description>
        <pubDate>Sun, 27 Jul 2014 20:34:19 -0500</pubDate>
        <link>http://sinkingshriek.github.io/node/angular/chaijs/mocha/2014/07/27/barebones-unit-testing-in-angular-with-mocha/</link>
        <guid isPermaLink="true">http://sinkingshriek.github.io/node/angular/chaijs/mocha/2014/07/27/barebones-unit-testing-in-angular-with-mocha/</guid>
      </item>
    
  </channel>
</rss>
